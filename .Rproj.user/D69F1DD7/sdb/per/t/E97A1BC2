{
    "collab_server" : "",
    "contents" : "\\documentclass[a4paper,9pt]{article}\n%\\VignetteEngine{knitr::knitr}\n%\\VignetteIndexEntry{Laboratory Notes - Analysis of Microarray Data}\n\\usepackage{a4wide}\n\\usepackage{graphicx,color}\n\\usepackage{amsmath,amssymb}\n\\usepackage{fancyvrb}\n% \\usepackage{float}\n\\usepackage{url}\n% \\usepackage{exercises}\n\\VerbatimFootnotes\n\\begin{document}\n\\begin{center}\n\\section*{\\LARGE \\bf Analysis of Spotted  Microarray Data}\n\n\\section*{John Maindonald}\nStatistics Research Associates\\\\\n\\url{http://www.statsresearch.co.nz/}\n\n\\subsection*{Revised August 14 2016}\n\\end{center}\n\\vspace*{0.5cm}\n\nThe example data will be for spotted (two-channel) microarrays.  Exactly the same approaches are relevant to spotted \noligonucleotides.\n\n\\section{Spotted Microarray Methodology \\& Tools}\nEach array (``slide'') typically compares expression in genes from one ``sample'' (type of cell) with expression in genes from another\n``sample''. The common dyes are Cy5 (``red'') and Cy3 (``green'').\n\nSteps in the process of getting microarray intensity measurements are:\n\\begin{enumerate}\n\\item cDNA samples are obtained by reverse transcription, one for each\nof the two mRNA samples. One sample is labeled with ``red'' dye and\none with ``green'' dye.\n\\item The samples are mixed and hybridized onto the slide.\n\\item An image analyser is used to give separate images of the ``red''\nand ``green'' signals. Think of these as much like digital camera\nimages, but with just two frequencies. The resolution may be 15-30\npixels per spot.\n\\item Image analysis software is used to extract various statistical\nsummaries of the images of the spots and of their surroundings.  This\ninvolves:\n\\begin{enumerate}\n\\item Determination of spot boundaries.\n\\item Determination, for each spot, of ``red'' (R) and ``green'' (G)\nsignals. Most software offers a choice of alternative summaries of the spot\npixel intensities.  Typically an average (mean or median) is taken.\n\\item Determination, for each spot, of ``red'' (Rb) and ``green'' (Gb)\nbackgrounds.\n\\item Determination of one or more quality measures.  These may include:\nspot size, spot shape (round spots are best, if this is what the\nprinter was supposed to provide), spot intensity and the range of\nintensity values.\n\\end{enumerate}\n\\end{enumerate}\nThe spots that are of interest are those where is a consistent difference\nbetween the red and the green signals. It is usual to take either\nlog(R)-log(G) or log(R-Rb)-log(G-Gb), apply a correction for dye bias,\nand use this as a measure of differential expression.  This leads to\na logratio (M) that can be used for further analysis.\n\nVisual checks of the spatial distribution of the separate statistical\nsummaries can be highly revealing.  Below, we will obtain spatial plots\nfor each of R (red), Rb (red background), G (green), Gb (green background),\nM (logratio) and one or more spot quality measures.\n\n\\subsection{Scanning and Image Analysis}\n\nThe images with which we will work are from an Affymetrix TM 428\nscanner.  Image analysis was performed using the CSIRO Spot image\nanalysis software.  There are six ``\\textbf{.spot}'' files, one for\neach of six replications of the experiment.  Information about the\nthree slides (each with dyeswap repeats) is in the file\n\\textbf{coralTargets.txt}.  The file \\textbf{dk\\_coral-annotated.gal}\nholds identication information about the genes on the slides, and\nabout the layout on the slides.  \\footnote{\\textbf{Note:} Users of\nAxon scanners are likely to work with the accompanying GenePix image\nanalysis software. This gives files that have the suffix\n``\\textbf{.gpr}''.  Other combinations of scanner and image analysis\nsoftware will yield files that hold broadly equivalent information,\nbut formatted and labeled differently. ANU users may encounter the\ncombination of Affymetrix TM 428 scanner and Jaguar image analysis\nsoftware that is available at the RSBS Proteomics and Microarray\nfacility.  Jaguar places records in the output file in an order that\nis different from that used by Spot and GenePix.}\n\nHere are the contents of the file \\textbf{coralTargets.txt}\n\\begin{verbatim}\nSlideNumber  FileName      Cy3  Cy5\n        221a coral551.spot post  pre\n        221b coral552.spot  pre post\n        223a coral553.spot post  pre\n        223b coral554.spot  pre post\n        224a coral555.spot post  pre\n        224b coral556.spot  pre post\n\\end{verbatim}\nNote that:\n\\begin{itemize}\n\\item [] \\texttt{pre} = pre-settlement, i.e., before the larvae have settled\n\\item [] \\texttt{post} = post-settlement, i.e., after settlement onto the\nsubstrate.\n\\end{itemize}\n\n\\subsection{Plotting and Analysis Software}\n\nThe \\textit{limma} package, written by Dr Gordon Smyth and colleagues\nat WEHI, will be used here. It is reasonably straightforward to use,\ndoes a good job of initial data exploration, and offers state of the\nart abilities for analysis of differential expression.\n\nAdditionally, three functions from the \\textit{DAAGbio} package will\nbe used.\n\n\\section{Getting Started}\n\nThe data files that are used here will be accessed from the {\\bf doc}\nsubdirectory in the {\\em DAAGbio} package installation.\n<<path-to-data, eval=TRUE>>=\nlibrary(DAAGbio)\npath2data <- system.file(\"doc\", package=\"DAAGbio\")\n@ %\n\n\\paragraph{Note 1:} For a new project, a good first step is to start a\nnew directory that holds the data.  For the purposes of this vignette,\nthe following files would be placed in that directory:\n\\textbf{coral551.spot}, \\textbf{coral552.spot},\n\\textbf{coral553.spot}, \\textbf{coral554.spot},\n\\textbf{coral555.spot}, \\textbf{coral556.spot}, files\n\\textbf{coralTargets.txt}, \\textbf{SpotTypes.txt} and\n\\textbf{dk\\_coral-annotated.gal}. Then set \\texttt{path2data} to be\nthe path to that directory.\n\n\\paragraph{Note 2:} As of version 0.6 of \\textit{DAAGbio}, the six\n``\\textbf{.spot}'' files \\textbf{coral551.spot}, \\ldots,\n\\textbf{coral556.spot} are stored in a compressed format, reducing\nthem to a little over 40\\% of their original size. They have been\ncreated by typing, on a Unix or Unix-like command line:\\\\[4pt]\n\\textbf{\\em gzip -9 coral55?.spot}\\\\[4pt]\nThey were then renamed back to \\textbf{\\em *.spot}. The R file-reading\nabilities that are used by \\texttt{read.maimages()} are, from R\nversion 2.10.0 and onwards, able to process such files.\n\n\\subsection*{Attaching the \\textit{limma} package}\n\nStart an R session.  From the command line, type\n<<load-limma, echo=TRUE, eval=TRUE>>=\nlibrary(limma)\n@ %\n\n\\paragraph{Help for \\texttt{limma}}\n\nType \\texttt{help.start()}.  After a short time a browser window should\nopen.  You might want to take a brief look at the User's Guide for\n\\textit{limma}.  Click on \\underline{Packages}, then on\n\\underline{limma}, then on \\underline{Overview}, then on\n\\underline{LIMMA User's Guide (pdf)}\n\n\\subsection{Reading Data into R}\n\nAs a first step, read into R the information about the half-slides, from\nthe file \\textbf{coralTargets.txt}.  Here is\nhow:\\footnote{\\textbf{Note:} The above assumes that tabs have been\nused as separators, when the file \\textbf{coralTargets.txt} was\ncreated.  I have created a second targets file --\n\\textbf{coralTargsp.txt}, in which the separators are spaces.  For\nthis, enter:\\\\\n\\texttt{targets <- readTargets(\"coralTargsp.txt\", path=path2data, sep=\"\")}}\n<<readTargets, echo=TRUE, eval=TRUE, results=\"hide\">>=\ntargets <- readTargets(\"coralTargets.txt\", path=path2data)\ntargets$FileName     # Display the file names\n@\nThe first command gets the targets information.\nThe names of the files are stored in the \\texttt{FileName} column.\\footnote{\n\\begin{BVerbatim}[baseline=t]\n## Another way to get the file names is to enter\nfnames <- dir(path=path2data, pattern=\"\\\\.spot\")\n # Finds all files whose names end in \".spot''\n\\end{BVerbatim}\n}\nTo see the complete information that has been input:\n\\texttt{targets}, type:\n<<see-targets, echo=TRUE, eval=FALSE>>=\ntargets\n@\n\nNext, the function \\texttt{read.maimages()} (from the \\textit{limma}\npackage) will be used to read in the data.  This function puts all the\ninformation from the separate files into a single data structure, here\ncalled \\texttt{coralRG}. Use of a name that has the final \\texttt{RG}\nis not compulsory, but serves as a useful reminder that the structure\nhas information on the red signal and red background (\\texttt{R} and\n\\texttt{Rb}), and on the green signal and green background (\\texttt{G}\nand \\texttt{Gb}).\n<<read-images, echo=TRUE, eval=TRUE, results=\"hide\">>=\ncoralRG <- read.maimages(targets$FileName, source = \"spot\",\n    path=path2data,\n    other.columns=list(area=\"area\", badspot=\"badspot\"))\n@\nThe \\texttt{other.columns} information is an optional extra,\nwhich it is however useful to use to read in quality measures.\n\nVarious summary information can be obtained for the different half-slides and\nmeasures.  Foe example:\n<<echo=TRUE, eval=TRUE, results=\"hide\">>=\nsummary(coralRG$other$area)\n@ %\nHowever these may not mean much for those who are new to microarray\ndata. Graphs are in general more helpful.  For example, here is a\ngraph that will help in judging the extent to which spots are close to\nthe expected 100 units of area.\n<<echo=TRUE, eval=TRUE>>=\nplot(density(coralRG$other$area[,1]))\n@\nThe \\textit{limma} package does actually allow for the use of area\nas a measure of quality, with information from spots that are larger\nor smaller than the optimum given a reduced weight in the analysis.\n\n\\subsubsection*{Sequence annotation and related information}\n\nNext, additional information will be tagged on to the \\texttt{coralRG}\nstructure, first gene annotation information that is read from the\n\\textbf{.gal} file, and then information on the way that the\nhalf-slides were printed that can be deduced from the gene annotation file.\n<<echo=TRUE, eval=TRUE, results=\"hide\">>=\ncoralRG$genes <- readGAL(path=path2data)\ncoralRG$printer <- getLayout(coralRG$genes)\ncoralRG$printer\n@\nThese half slides were printed in a 4 by 4 layout, corresponding to the\n4 by 4 layout of the printhead.  Each tip printed an array of 16 rows\nby 12 columns.  To see the order in which the spots were printed,\nattach the \\textit{DAAGbio} package, and run the function\n\\texttt{plotprintseq()}, thus:\nand enter:\n<<printseq>>=\nplotprintseq()\n@\n\n\n\\subsubsection*{The Spot Types File}\nThis is optional, but strongly recommended.  Spots can be grouped into\nat least four categories -- there are ``genes'' (really, partial gene\nsequences), negative controls, blanks and differentially expressed\ncontrols.  Genes may or may not be differentially expressed, the next\nthree categories should not show evidence of differential expression,\nand the differentially expressed controls should mostly show evidence\nof differential expression.  Plots that label points according to\ntheir types can be beautiful, insightful and, if they find nothing\namiss, reassuring.\n\nHere is what the file looks like (note that tabs must be\nused as separators, for the code below to work without modification):\n\\begin{verbatim}\nSpotType        ID      Name    Color\ngene            *       *       black\nnegative        *       [1-9]*  brown\nblank           *       -       yellow\ndiff-exp ctl    *       DH*     blue\n\\end{verbatim}\n{\\noindent \\small Any color in the long list given by the function\n\\texttt{colors()} is acceptable.  Try for example \\texttt{royalblue}\nor \\texttt{hotpink} for calibration spots.  They are much less\neffective.  You could use \\texttt{coral} in place of \\texttt{black}\nfor the ``gene''!!}\n\nThe following extracts the spot type information from the file,\nand appends it to the data structure that I have called\n\\texttt{coralRG}:\n<<echo=TRUE, eval=TRUE>>=\nspottypes<-readSpotTypes(path=path2data)\ncoralRG$genes$Status <- controlStatus(spottypes, coralRG)\n@\n\n\\section{Plots}\n\n\\subsection{Spatial Plots}\nThese plots use colour scales to summarize, on a layout that reflects\nthe actual layout of the slide, information on the spots.  The idea is\nto check for any strong spatial patterns that might indicate some lack\nof uniformity that has resulted from the printing (e.g., one print tip\nprinting differently from the others), or from uneven conditions in\nthe hybridization chamber.  There may be surface features, perhaps due\nto a hair or to the mishandling of one corner of the slide, this may\nshow up on the plot.\n\nWhat is finally important is of course the effect on the log-ratios\n(the M-values).  Some unevenness in the separate foreground and\nbackground intensities can be tolerated, providing that it leads to\nmuch the same proportional change in both channels.\n\nThere are two possibilities -- to use \\texttt{imageplot()} from\n\\textit{limma}, or to use my function \\texttt{imgplot()} that is\nincluded in the \\textit{DAAGbio} package; see the appendux.  Here are\nplots that use \\texttt{imageplot()}:\n<<echo=TRUE, eval=TRUE>>=\nimageplot(log2(coralRG$Rb[, 1]+1), layout = coralRG$printer,\n          low=\"white\", high=\"red\")\n@\nThis should be repeated for each different half-slide, for both red and\ngreen, and similarly for the green background.  To get the plot for the\nsecond half-slide, type:\n<<echo=TRUE, eval=TRUE>>=\nimageplot(log2(coralRG$Rb[, 2]+1), layout = coralRG$printer,\n          low=\"white\", high=\"red\")\n@\n\nThe plots can be obtained all six at once, in a three rows by two\ncolumns layout.  For this, use the function \\texttt{xplot()},\nincluded in the \\textit{DAAGbio} package.\n\nAs an example, to get the six plots for the red channel on the screen, type:\n<<six-plots, eval=FALSE>>=\nx11(width=7.5, height=11)\nxplot(data = coralRG$R, layout = coralRG$printer, FUN=imageplot)\n@ %\n(Under Macintosh OSX with the Aqua GUI, specify\n\\texttt{quartz(width=7.5, height=11)} to use the quartz device.\nIt is also possible to send the output to a hard copy.  Type, e.g.:\n<<hard-copy, eval=FALSE>>=\nquartz(width=7.5, height=11)\nxplot(data = coralRG$R, layout = coralRG$printer, FUN=imageplot,\n       device=pdf)\n@ %\nOther possibilities for \\texttt{device} are \\texttt{device=\"ps\"},\n\\texttt{device=\"png\"}, \\texttt{device=\"jpeg\"} and\n\\texttt{device=\"bmp\"}.  For \\texttt{device=\"png\"} and\n\\texttt{device=\"jpeg\"} the parameters \\texttt{width} and\n\\texttt{height} will need to be specified, in pixels, in the call to\n\\texttt{sixplot()}.\n\n\\subsection{MA plots \\& Normalization}\nIn this overview, the default background correction will be used, in\nwhich the background is in each case subtracted from the corresponding\nmeasured signal.\\footnote{For image files from Spot, this usually\nworks fairly well.  GenePix gives image files in which the intensities\ncan be much too high.  There are alternative to subtracting off the\nbackground that may be desirable, perhaps ignoring it altogether.}\n\nAt this point normalization is an issue.  The Cy3 channel (``green'')\ntypically shows up with higher intensity than the Cy5 channel\n(``red'').  The measure of differential expression is\\[\n{\\rm M} = \\log({\\rm red intensity}) - \\log({\\rm green intensity}) =\n\\log(\\frac{\\displaystyle \\rm red intensity}\n{\\displaystyle \\rm green intensity})\n\\]\n\nFirst, check what happens if we do not normalize.\nTry the following:\n<<echo=TRUE, eval=TRUE>>=\nplotMA(coralRG, array=1)\n@\nThis plots the unnormalized log-ratios (the M-values) against the\nthe averages of the log-intensities for the two separate channels,\ni.e., against what are called the A-values.\n\nTo see all six arrays in a single plot, precede the six plots\n(first with \\texttt{array=1}, then \\texttt{array=1}, \\ldots)\nwith:\n<<all-six, eval=FALSE>>=\noldpar <- par(mfrow=c(3,2), mar=c(5.1, 4.1, 1.1, 0.6))\n## When done with the 3 by 2 layout, be sure to type\npar(oldpar)     # This returns to the original settings.\n@ %\nIn some of the plots, the dye bias is rather strongly density dependent.\n\nIt is also possible to do the following:\n<<echo=TRUE, eval=TRUE>>=\nrawMA <- normalizeWithinArrays(coralRG, method = \"none\")\nplotPrintTipLoess(rawMA, array=1)\n@\nA different curve is fitted for each of the print tip groups.\nThere does seem to be some difference in dye bias between the\ndifferent print tip groups.\n\nNext, we apply print tip loess normalization, and check the MA plots:\n<<echo=TRUE, eval=TRUE>>=\nMA <- normalizeWithinArrays(coralRG, method = \"printtiploess\")\nplotPrintTipLoess(MA)\n@\nNext, we check whether normalization seems required between arrays:\n<<echo=TRUE, eval=FALSE>>=\nboxplot(MA$M ~ col(MA$M), names = colnames(MA$M))\n@\n(There is a helpful explanation of boxplots at:\n\\url{http://davidmlane.com/hyperstat/A38393.html})\n\nAs the arrays seem to have different spreads of M-values, we scale\nnormalize between arrays, and repeat the boxplot:\n<<echo=TRUE, eval=TRUE>>=\nnMA <- normalizeBetweenArrays(MA)\nboxplot(nMA$M ~ col(nMA$M), names = colnames(nMA$M))\n@\nThe scaling ensures that the medians, and the upper and lower quartiles,\nagree across the different slides.\n\n\\subsubsection*{Checks on the Differentially Expressed Controls}\n\nThe differentially expressed controls ought to show similar evidence of\ndifferential expression on all sets of results. Do they?\n\nWe extract the M-values for the differentially expressed controls\nfrom the total data.\n<<echo=TRUE, eval=TRUE>>=\nwanted <- coralRG$genes$Status == \"diff-exp ctl\"\nrawdeM <- rawMA$M[wanted, ]\npairs(rawdeM)\n@ %\nThe differentially expressed controls line up remarkably well\nacross the different half-slides.  Notice that half-slide 5 is the odd\none out.  (Why is the correlation sometimes positive and\nsometimes negative? What is the pattern?)\n\nWe now repeat this exercise with the normalized data:\n<<echo=TRUE, eval=TRUE>>=\nwanted <- coralRG$genes$Status == \"diff-exp ctl\"\ndeM <- nMA$M[wanted, ]\npairs(rawdeM)\n@ %\nHalf-slide 5 is still a maverick.  The differentially expressed\ncontrols from the other half-slides line up beautifully.\\newline [Dear\nme! Every family of more than two or three has a misfit.  We'll banish\nhalf-slide 5 from our assemblage, at least until we can think of\nsomething better to do with it.]\n\n\\subsubsection*{More plots}\nUse \\texttt{imageplot()} with the M-values on all these half-slides, and look\nespecially at half-slide 5, thus:\n<<echo=TRUE, eval=TRUE>>=\nimageplot(nMA$M[,5], layout=coralRG$printer)\n@ %\nSomething bad clearly happened to the left side of this half-slide!\n\n\\section{Tests for Differential Expression}\nWe fit a simple statistical model that allows for the possible\neffect of the dye swap, and which we can use as the basis for\nchecks for differential expression.\nRecall that ${\\rm M} = \\log({\\rm red intensity}) - \\log({\\rm green intensity})$.\nHere is how this connects with treatments:\n\\vspace*{3pt}\n\n\\begin{tabular}{lcccccc}\nSlide & 221a & 221b & 223a & 223b & 224a & 224b \\\\\n\\hline\n & $\\log({\\rm pre/post)}$ & $\\log({\\rm post/pre)}$\n & $\\log({\\rm pre/post)}$ & $\\log({\\rm post/pre)}$\n & $\\log({\\rm pre/post)}$ & $\\log({\\rm post/pre)}$ \\\\\nXply by & -1 & 1 &  -1 & 1 &  0 & 1 \\\\\n\\hline\n\\end{tabular}\n\\vspace*{3pt}\n\nResults for the first and third half-slide are multiplied by -1,\nso that $\\log({\\rm pre/post)}$ (which equals\n$\\log({\\rm pre}) - \\log({\\rm post)}$ becomes $\\log({\\rm post/pre)}$.\nThe 0 for the fifth half-slide will omit it altogether.\nThis is achieved by placing these numbers into a ``design vector''.\n<<echo=TRUE, eval=TRUE>>=\ndesign <- c(-1, 1, -1, 1, 0, 1)\n@\n\n\\subsubsection*{Fitting the statistical model}\nTo fit a model that reflects this design, specify:\n<<echo=TRUE, eval=TRUE>>=\nfit <- lmFit(nMA, design)\n@\nThis basically gives $t$-test results for all the different spots.\nAny attempt at interpretation has to take account of the large number\nof tests that have been performed.  Also, because there are just 5\nsets of usable M-values, the variances that are used in the\ndenominators of the $t$-statistics, and hence the $t$-statistics\nthemselves, are more unstable than is desirable.\n\nThe calculations that now follow take us into much more speculative\nterritory, where different software uses different approaches.\nMy view is that the calculations that are demonstrated are close\nto the best that are at present available:  They do three things:\n\\begin{itemize}\n\\item They use information from the variances for all spots,\ncombining this with the spot-specific information, to get\nmore stable $t$-statistics.\n\\item They make an adjustment for the multiplicity of tests,\nleading to adjusted $t$-statistics that can pretty much be\ncompared with the usual one-sample $t$-critical values.\\newline\n[There are many ways to do this.  Also the function requires\na prior estimate of the proportion of genes that are differentially\nexpressed, by default set to 0.01, i.e.\\ there is a large element\nof subjective judgment.]\n\\item For each gene they give an odds ratio ($B$ = Bayes factor) that\n      it is differentially expressed.  [This relies on the same prior\n      estimate of the proportion of genes that are differentially\n      expressed.]\n\\end{itemize}\n\nFrom the fit object, we calculate empirical Bayes moderated\n$t$-statistics and do a qq-plot:\n<<echo=TRUE, eval=TRUE>>=\nefit <- eBayes(fit)\nqqt(efit$t, df = efit$df.prior + efit$df.residual, pch = 16,\n    cex = 0.2)\n@ %\nThe majority of genes lie on a line that goes through the centre of\nthe plot.  Those that lie off this (below it on the left, or above it\non the right) are most likely to be differentially expressed.\n\\footnote{If the results from the different genes were independent,\nthe line on which most of the ``genes'' lie would be a 45$^\\circ$\nline, with a slope of 1.0.  If you wish, type \\texttt{abline(0, 1,\ncol=\"red\")} to put in such a line anyway. The line on which most of\nthe genes lie has a much steeper slope than this 45$^\\circ$ line.}\n\nNext we print out a table that shows the top 50 differentially\nexpressed genes, in order of the moderated $t$-statistic values:\n<<echo=TRUE, eval=TRUE, results=\"hide\">>=\noptions(digits = 3)\ntopvals <- topTable(efit, number = 50)\ntopvals\n@\nWe store the results in \\texttt{topvals} prior to displaying them,\nas they will be used later.  Notice that an adjusted $p$-value of 0.05\ncorresponds to a $B$-statistic of about 3.6.  This may be a reasonably\ncut-off point.\n\nThe order of genes on the list is much more secure than the $B$-values\nand $P$-values.  The extent to which the statistics are affected by the\nprior probability will be demonstrated in the exercise below.\n\nHere is another type of plot:\n<<echo=TRUE, eval=TRUE>>=\nplot(efit$coef, efit$lods, pch = 16, cex = 0.2, xlab = \"log(fold change)\",\n    ylab = \"log(odds)\")\nord <- order(efit$lods, decreasing = TRUE)\ntop8 <- ord[1:8]\ntext(efit$coef[top8], efit$lods[top8], labels = coralRG$genes[top8,\n    \"Name\"], cex = 0.8, col = \"blue\")\n@ %\n\n\\paragraph{Exercise:} Change the prior probability to 0.02, i.e.\n<<prior02, eval=FALSE>>=\nefit.02 <- eBayes(fit, prop=0.02)\ntopTable(efit.02, number = 50)\n@ %\nObserve what difference this makes to the list.  Try also \\texttt{prob=0.1}.\nA good way to see the effect is to plot the \\texttt{P.Value} or \\texttt{B}\nfrom the separate fits, one against the other:\n<<prior01, eval=FALSE>>=\nefit.1 <- eBayes(fit, prop=0.1)\nB.1 <- topTable(efit.1, number = 3072)$B\nB.01 <- topvals$B\npoints(B.01, B.1, col=\"gray\")\n@ %\n\nDo the equivalent plots for \\texttt{P.Value}.\n\n\\section{More refined analyses}\n\\subsection{Reading Data into R, with weight information incorporated}\n\nRead the data in, with weighting information included:\n<<echo=TRUE, eval=TRUE, results=\"hide\">>=\ncoral2RG <- read.maimages(targets$FileName,\n                         source = \"spot\",\n                         path=path2data,\n                         wt.fun=wtarea(100))\ncoral2RG$genes <- readGAL(path=path2data)\ncoral2RG$printer <- getLayout(coral2RG$genes)\n@ %\nThe weights will be used automatically by functions that operate\non \\texttt{coral2RG}.\n\n\\subsection{MA plots \\& Normalization}\nApply print tip loess normalization, and check the MA plots:\n<<echo=TRUE, eval=TRUE>>=\nMA2 <- normalizeWithinArrays(coral2RG, method = \"printtiploess\")\nplotPrintTipLoess(MA2)\n@ %\nNext, we check whether normalization seems required between arrays,\nthen scale normalize between arrays, and repeat the boxplot:\n<<echo=TRUE, eval=TRUE>>=\nboxplot(MA2$M ~ col(MA2$M), names = colnames(MA2$M))\nnMA2 <- normalizeBetweenArrays(MA2)\nboxplot(nMA2$M ~ col(nMA2$M), names = colnames(nMA2$M))\n@ %\n\n\\subsubsection*{Slide 5, again!}\nUse \\texttt{imageplot()} with the M-values on all these half-slides, and look\nespecially at half-slide 5, thus:\n<<echo=TRUE, eval=TRUE>>=\nimageplot(nMA2$M[,5], layout=coral2RG$printer)\n@ %\nUse of the quality information has not made much difference to this plot:\n\n\\subsubsection*{Fitting the statistical model}\nTo fit a model that reflects this design, specify:\n<<echo=TRUE, eval=TRUE>>=\ndesign <- c(-1, 1, -1, 1, 0, 1)\nfit2 <- lmFit(nMA2, design)\n@ %\n\nFrom the fit object, we calculate empirical Bayes moderated\n$t$-statistics and do a qq-plot:\n<<echo=TRUE, eval=TRUE>>=\nefit2 <- eBayes(fit2)\nqqt(efit2$t, df = efit2$df.prior + efit2$df.residual, pch = 16,\n    cex = 0.2)\n@\n\nNext we print out a table that shows the top 50 differentially\nexpressed genes, in order of the moderated $t$-statistic values:\n<<echo=TRUE, eval=TRUE, results=\"hide\">>=\noptions(digits = 3)\ntopTable(efit2, number = 50)\n@ %\n\nNow see what different the use of weights has made to the list\n(the vector \\texttt{topvals} was found earlier):\n<<echo=TRUE, eval=TRUE, results=\"hide\">>=\n## Get & store results with & without weights\ntopvals2 <- topTable(efit2, number = 50)\ncbind(row.names(topvals), row.names(topvals2))\n@ %\nNow check how many of the genes are in common across both lists:\n<<echo=TRUE, eval=TRUE, results=\"hide\">>=\nsum(row.names(topvals)%in%row.names(topvals2))\n@ %\n\\section*{Appendix}\n\n\\subsection*{Installation of the R software}\nFirst install R (2.10.0 or later).  (Versions are available for Unix,\nLinux, Windows and Macintosh OS X.)\n\nInstall the \\textit{limma} and \\textit{DAAGbio} packages.\nInstall {\\em DAAGbio} package from CRAN.  \n\nSee \\url{http://www.bioconductor.org/packages/release/bioc/html/limma.html}\nfor instructions on installing {\\em limma}. \n\n\n\\subsection{\\texttt{imgplot()} as an alternative to\n\\texttt{imageplot()}}\n\nThe function \\texttt{imgplot()} gives a display that is a bit\ndifferent from \\texttt{imageplot()}. Try:\n<<echo=TRUE, eval=TRUE>>=\nimgplot(coralRG$R[, 1], layout = coralRG$printer)\n@\nBy default, this shows just the smallest 5\\% of intensities and the\nlargest 5\\% of intensities.\n\nUse these to look for parts of the half-slide that all show a\nconsistent difference from the rest of the half-slide.\nRemember however that what is important is the pattern\nthat appears after background correction (if any),\nnormalization and the calculation of the M-values.\n\n\\subsection*{How was this document produced?}\nThe document \\textbf{marray-notes.Rnw} can be copied into the\nworking directory.  \n\nAlternatively, from within an R session, enter:\n<<process-Rnw, eval=FALSE>>=\nlibrary(knitr)\nknit(\"marray-notes.Rnw\")\n@ %\nThis produces a \\LaTeX\\ document that can then be processed through the\n\\LaTeX\\ document preparation system to give a postscript or pdf file.\n\nThis is a great way to document your eventual analyses.  Changes to\nthe code in the \\textbf{.Rnw} document are automatically reflected\nin the \\LaTeX\\ document that comes from \\texttt{knit()}.\nSee \\texttt{help(knit)} for information on documentation.\n\n\\subsection*{References}\n\\begin{itemize}\n\\item[] Smythe, G., Thorne, T., and Wettenhall, J. 2004. limma: Linear\nModels for Microarray Data User's Guide.  This document is included\nwith \\textit{limma} distributions.\n\\item[] Beare, R.\\ and Buckley, M. 2004. Spot:cDNA Microarray Image\nAnalysis Users Guide.\nAvailable from \\url{http://spot.cmis.csiro.au/spot/spotmanual.php}.\n\\end{itemize}\n\n\\subsection*{Acknowledgements}\nMany thanks to Gaby Samuels, Eldon Ball, David Hayward and Rob Saint\n(Centre for Molecular Genetics of Development) for permission to use\nthe coral data for this workshop.  The associated research was\nsupported by ARC grants DP0343727 (John Maindonald), S4116004\n(Lauretta Grasso, Gaby Samuels, Eldon Ball, David Hayward and Rob\nSaint, through CMGD).  Conrad Burden did a marvelous job of checking\nthese notes for mistakes.\n\\end{document}\n",
    "created" : 1489007362337.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3212980378",
    "id" : "E97A1BC2",
    "lastKnownWriteTime" : 1489009703,
    "last_content_update" : 1489009703839,
    "path" : "~/packages/DAAGbio/vignettes/marray-notes.Rnw",
    "project_path" : "vignettes/marray-notes.Rnw",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "sweave"
}